








CREATE TABLE IF NOT EXISTS ROLE
(
   ROLEID			TINYINT NOT NULL  AUTO_INCREMENT,
   NAME			VARCHAR(30) NOT NULL,
   DESCRIPTION	VARCHAR(30),
   CREATED 		DATETIME DEFAULT NOW(),
   UPDATED 		DATETIME DEFAULT NOW(),
   PRIMARY KEY PK_ROLEID(ROLEID),
   UNIQUE UK_ROLE(NAME)
   
);
ALTER TABLE ROLE COMMENT 'List of all the user roles for authorization';


CREATE TABLE IF NOT EXISTS ROLE_ACCESS
(
   ROLEID			TINYINT NOT NULL,
   API			VARCHAR(300) NOT NULL,
   CREATED 		DATETIME DEFAULT NOW(),
   UPDATED 		DATETIME DEFAULT NOW(),
   PRIMARY KEY PK_ROLE_ACCESS(ROLEID,API),
   FOREIGN KEY FK_ROLE(ROLEID) REFERENCES ROLE(ROLEID)
   
);
ALTER TABLE ROLE_ACCESS COMMENT 'API associated to a role';



CREATE TABLE IF NOT EXISTS REPORT_TYPE
(
   REPORTTYPEID	TINYINT NOT NULL  AUTO_INCREMENT,
   CODE			VARCHAR(20)   NOT NULL,	
   NAME			VARCHAR(200)  NOT NULL,
   DESCRIPTION	VARCHAR(500),
   CREATED 		DATETIME DEFAULT NOW(),
   UPDATED 		DATETIME DEFAULT NOW(),
   PRIMARY KEY PK_REPORTTYPE(REPORTTYPEID),
   UNIQUE UK_REPORT_TYPE(NAME)
);

ALTER TABLE  REPORT_TYPE COMMENT 'List of all the user report types';



CREATE TABLE IF NOT EXISTS CONTACT_TYPE
(
   CONTACTTYPEID	TINYINT NOT NULL  AUTO_INCREMENT,
   NAME				VARCHAR(30) NOT NULL,
   DESCRIPTION		VARCHAR(30),
   CREATED 			DATETIME DEFAULT NOW(),
   UPDATED 			DATETIME DEFAULT NOW(),
   PRIMARY KEY PK_CONTACTTYPE(CONTACTTYPEID),
   UNIQUE UK_CONTACT_TYPE(NAME)
);

ALTER TABLE  CONTACT_TYPE COMMENT 'List of all the user contact types - email , phone';



CREATE TABLE IF NOT EXISTS ADDRESS_TYPE
(
   ADDRESSTYPEID	TINYINT NOT NULL  AUTO_INCREMENT,
   NAME				VARCHAR(30) NOT NULL,
   DESCRIPTION		VARCHAR(30),
   CREATED 			DATETIME DEFAULT NOW(),
   UPDATED 			DATETIME DEFAULT NOW(),
   PRIMARY KEY PK_ADDRESSTYPE(ADDRESSTYPEID),
   UNIQUE UK_ADDRESS_TYPE(NAME)
);

ALTER TABLE  ADDRESS_TYPE COMMENT 'List of all the user address types - home, work';



CREATE TABLE IF NOT EXISTS RELATION_TYPE
(
   RELATIONID	TINYINT NOT NULL  AUTO_INCREMENT,
   NAME			VARCHAR(30) NOT NULL,
   DESCRIPTION	VARCHAR(30),
   CREATED 		DATETIME DEFAULT NOW(),
   UPDATED 		DATETIME DEFAULT NOW(),
   PRIMARY KEY PK_ROLEID(RELATIONID),
   UNIQUE UK_RELATION(NAME)
   
);
ALTER TABLE RELATION_TYPE COMMENT 'Person relations';



CREATE TABLE IF NOT EXISTS MEDICAL_REPORT_STATE
(
   STATEID		TINYINT NOT NULL,
   NAME			VARCHAR(30) NOT NULL,
   DESCRIPTION	VARCHAR(100),
   CREATED 		DATETIME DEFAULT NOW(),
   UPDATED 		DATETIME DEFAULT NOW(),
   PRIMARY KEY PK_STATEID(STATEID),
   UNIQUE UK_MEDICAL_REPORT_STATE(NAME)
   
);
ALTER TABLE RELATION_TYPE COMMENT 'Person relations';



CREATE TABLE IF NOT EXISTS ADDRESS
( 
	 ADDRESSID 		BIGINT  NOT NULL  AUTO_INCREMENT,
	 ADDRESSLINE1 	VARCHAR(255) NOT NULL,
	 ADDRESSLINE2 	VARCHAR(255),
	 CITY			VARCHAR(200),
	 STATE			VARCHAR(100),
	 COUNTRY 		VARCHAR(255),
	 ZIPCODE 		VARCHAR(20),
	 CREATED 		DATETIME DEFAULT NOW(),
     UPDATED 		DATETIME DEFAULT NOW(),
     PRIMARY KEY PK_ADDRESSID(ADDRESSID)
);

ALTER TABLE  ADDRESS COMMENT 'Address database';




CREATE TABLE IF NOT EXISTS ORGANIZATION_TYPE
(
   ORGTYPEID	TINYINT NOT NULL  AUTO_INCREMENT,
   NAME			VARCHAR(30) NOT NULL,
   DESCRIPTION	VARCHAR(30),
   CREATED 		DATETIME DEFAULT NOW(),
   UPDATED 		DATETIME DEFAULT NOW(),
   PRIMARY KEY PK_ORG_TYPEID(ORGTYPEID)
   
);

ALTER TABLE  ORGANIZATION_TYPE  COMMENT 'Various types of org involved with the system';


   	
   	
CREATE TABLE IF NOT EXISTS ORGANIZATION (
   		ORGID				MEDIUMINT  NOT NULL AUTO_INCREMENT,
   		ORGTYPEID 			TINYINT NOT NULL,
   		NAME 				VARCHAR(255) NOT NULL,
   		DESCRIPTION 		VARCHAR(255),
   		ADDRESSID  			BIGINT,
   		PARENTORGID			MEDIUMINT,
   		STATE				TINYINT DEFAULT 0,
   		CREATED 			DATETIME DEFAULT NOW(),
  		UPDATED 			DATETIME DEFAULT NOW(),
   		PRIMARY KEY PK_ORG(ORGID),
   		FOREIGN KEY FK_ORG_TYPE (ORGTYPEID) REFERENCES ORGANIZATION_TYPE(ORGTYPEID),
   		FOREIGN KEY FK_ORG_ADDRESSID (ADDRESSID) REFERENCES ADDRESS(ADDRESSID),
   		FOREIGN KEY FK_ORG_PARENTID (PARENTORGID) REFERENCES ORGANIZATION(ORGID),
   		UNIQUE UK_ORG_NAME(NAME)
   	);
	
ALTER TABLE  ORGANIZATION COMMENT 'Various organization involved with the system';





CREATE TABLE IF NOT EXISTS ORGANIZATION_CONTACT 
(
    ORG_CONTACT_ID	BIGINT NOT NULL  AUTO_INCREMENT,
    ORGID  			MEDIUMINT  NOT NULL,
  	CONTACTTYPEID   TINYINT NOT NULL,
  	VALUE     		VARCHAR(200) NOT NULL,
  	STATE     		TINYINT NOT NULL,
  	CREATED 		DATETIME DEFAULT NOW(),
   	UPDATED 		DATETIME DEFAULT NOW(),
   	PRIMARY KEY PK_ORGANIZATION_CONTACT(ORG_CONTACT_ID),
   	FOREIGN KEY FK_OC_ORG (ORGID) REFERENCES ORGANIZATION(ORGID),
   	FOREIGN KEY FK_OC_TYPEID (CONTACTTYPEID) REFERENCES CONTACT_TYPE(CONTACTTYPEID)
);


ALTER TABLE  ORGANIZATION_CONTACT COMMENT 'Stores varies types of contacts for a organization'; 



CREATE TABLE IF NOT EXISTS PERSON (
   		ID 			BIGINT NOT NULL  AUTO_INCREMENT,
   		ORGID		MEDIUMINT NOT NULL,
   		FIRSTNAME   VARCHAR(100) NOT NULL,
   		LASTNAME    VARCHAR(100) NOT NULL,
   		MIDDLENAME  VARCHAR(100),
   		OTHERNAME   VARCHAR(100),
   		DOB			DATE,
   		GENDER		TINYINT,	
   		NATIONALID	VARCHAR(200),
   		SECRETKEY	VARCHAR(200) NOT NULL,
   		CREATED 	DATETIME DEFAULT NOW(),
   		UPDATED 	DATETIME DEFAULT NOW(),
   		FOREIGN KEY FK_PERSON_ORG (ORGID) REFERENCES ORGANIZATION(ORGID),
   		PRIMARY KEY PERSON(ID)
);


ALTER TABLE PERSON ADD INDEX IDX_PERSON_LASTNAME (LASTNAME);
ALTER TABLE PERSON ADD INDEX IDX_PERSON_ORGID_LASTNAME (ORGID,LASTNAME);
ALTER TABLE  PERSON COMMENT 'Table to store all person information. This table tracks any involved personnel with Wytal';


CREATE TABLE IF NOT EXISTS PERSON_CONTACT 
(
    PCID		    BIGINT NOT NULL  AUTO_INCREMENT,
    PERSONID  		BIGINT  NOT NULL,
  	CONTACTTYPEID   TINYINT NOT NULL,
  	VALUE     		VARCHAR(200) NOT NULL,
  	STATE     		TINYINT NOT NULL,
  	CREATED 		DATETIME DEFAULT NOW(),
   	UPDATED 		DATETIME DEFAULT NOW(),
   	PRIMARY KEY PK_PERSON_CONTACT(PCID),
   	FOREIGN KEY FK_PC_ID (PERSONID) REFERENCES PERSON(ID),
   	FOREIGN KEY FK_PC_TYPEID (CONTACTTYPEID) REFERENCES CONTACT_TYPE(CONTACTTYPEID)
);
ALTER TABLE  PERSON_CONTACT COMMENT 'Stores varies types of contacts for a person';  
	
   	
   	
CREATE TABLE IF NOT EXISTS PERSON_ADDRESS (
		PESRSON_ADDRESS_ID    	BIGINT NOT NULL AUTO_INCREMENT,
		PERSONID 				BIGINT NOT NULL,
   		ADDRESSTYPEID 			TINYINT NOT NULL,
   		ADDRESSID 				BIGINT NOT NULL,
   		ISPRIMARY				TINYINT,
   		CREATED 				DATETIME DEFAULT NOW(),
   		UPDATED 				DATETIME DEFAULT NOW(),
   		PRIMARY KEY 			PK_PERSON_ADDRESS (PESRSON_ADDRESS_ID),
   		FOREIGN KEY 			FK_PC_TYPEID (ADDRESSTYPEID) REFERENCES ADDRESS_TYPE(ADDRESSTYPEID),
   		FOREIGN KEY 			FK_PERSON_PERSONID (PERSONID) REFERENCES PERSON(ID),
   		FOREIGN KEY 			FK_PERSON_ADDRESSID (ADDRESSID) REFERENCES ADDRESS(ADDRESSID)
);

ALTER TABLE  PERSON_ADDRESS COMMENT 'Stores varies types of address for a person';  



CREATE TABLE IF NOT EXISTS PERSON_RELATIONSHIP (
	  PERSONID 			BIGINT NOT NULL,
	  RELATIONID 		TINYINT NOT NULL,
	  RELATEDPERSONID 	BIGINT NOT NULL,
	  PRIMARY KEY  PK_PERSON_RELATIONSHIP (PERSONID,RELATIONID,RELATEDPERSONID),
	  FOREIGN KEY  FK_ERSON_RELATIONSHIP_PID(PERSONID) REFERENCES PERSON(ID),
	  FOREIGN KEY  FK_ERSON_RELATIONSHIP_RID(RELATEDPERSONID) REFERENCES PERSON(ID)
);
ALTER TABLE  PERSON_RELATIONSHIP COMMENT 'Personal relation ship';  
	  
	  


CREATE TABLE IF NOT EXISTS PERSONNEL
(
   PERSONNELID 			BIGINT    NOT NULL  AUTO_INCREMENT,
   PERSONID 			BIGINT    NOT NULL,
   TITLE 				VARCHAR(300) NOT NULL,
   STATE				TINYINT   NOT NULL DEFAULT 0,
   CREATED 				DATETIME DEFAULT NOW(),
   UPDATED 				DATETIME DEFAULT NOW(),
   PRIMARY KEY PK_PERSONNEL(PERSONNELID),
   FOREIGN KEY FK_PERSONNEL_PERSON(PERSONID) REFERENCES PERSON(ID)
);
ALTER TABLE  PERSONNEL COMMENT 'Table to store all involved personnel';    


CREATE TABLE IF NOT EXISTS PROVIDER_IDENTIFIER_TYPE (
   		IDENTIFIEDTYPEID 			TINYINT NOT NULL  AUTO_INCREMENT,
   		CODE		VARCHAR(50) NOT NULL,
   		DESCRIPTION VARCHAR(500) NOT NULL,
   		PRIMARY KEY PK_PROVIDER_IDENTIFIER_TYPE(IDENTIFIEDTYPEID),
   		CREATED 				DATETIME DEFAULT NOW(),
  		UPDATED 				DATETIME DEFAULT NOW()
);
ALTER TABLE  PERSONNEL COMMENT 'Table to store all  personnel identifiers';    


CREATE TABLE IF NOT EXISTS PERSONNEL_PROVIDER_IDENTIFIER
(
	PERSONNELID 			BIGINT    NOT NULL  AUTO_INCREMENT,
	IDENTIFIEDTYPEID		TINYINT   NOT NULL,
	IDENTIFIEER				VARCHAR(200) NOT NULL,
	PRIMARY KEY PK_PERSONNEL_PROVIDER_IDENTIFIER(PERSONNELID,IDENTIFIEDTYPEID),
	FOREIGN KEY FK_PERSONNEL_PROVIDER_IDENTIFIER_PID(PERSONNELID) REFERENCES PERSONNEL(PERSONNELID),
	FOREIGN KEY FK_PERSONNEL_PROVIDER_IDENTIFIER_ID(IDENTIFIEDTYPEID) REFERENCES PROVIDER_IDENTIFIER_TYPE(IDENTIFIEDTYPEID)
);
	
ALTER TABLE  PERSONNEL_PROVIDER_IDENTIFIER COMMENT 'Identifier for all providers';   


 

CREATE TABLE IF NOT EXISTS PERSONNEL_ORGANIZATION
(
	PERSONNELID 			BIGINT    NOT NULL,
	STATE					TINYINT   NOT NULL DEFAULT 0,
	STARTDATE				DATE      NOT NULL,
	ENDDATE					DATE,
	CREATED 				DATETIME DEFAULT NOW(),
    UPDATED 				DATETIME DEFAULT NOW(),
	PRIMARY KEY PK_PERSONNEL_ORGANIZATION(PERSONNELID,STARTDATE),
	FOREIGN KEY FK_PERSONNEL_PERSONNEL(PERSONNELID) REFERENCES PERSONNEL(PERSONNELID)	
);
ALTER TABLE  PERSONNEL_ORGANIZATION COMMENT 'Organizations personnel is associated to ( can be more than one at a time)'; 



CREATE TABLE IF NOT EXISTS MEDICAL_RECORD (
	MEDICAL_RECORDID BIGINT NOT NULL AUTO_INCREMENT,
	INPUT_TYPE			VARCHAR(10) NOT NULL,
	PERSONID			BIGINT 		NOT NULL,
   	SENDING_ORG			MEDIUMINT	NOT NULL		COMMENT  	'Medical Organization who forwarded the medical record',
   	SENDING_PERSONNEL 	BIGINT	 	NOT NULL 		COMMENT 	'Medical Practitioner who forwarded the report', 
   	RECEIVING_ORG		MEDIUMINT  					COMMENT  	'Medical Organization who requested for the medical record', 
   	RECEIVING_PERSONNEL	BIGINT	 	NOT NULL  		COMMENT  	'Medical Practitioner who requested from Medical personnel or Organization',
   	CREATEDBY			MEDIUMINT 	NOT NULL		COMMENT  	'Medical Organization that originally created this report',
   	REPORTTYPEID		TINYINT,
   	DATEOFSERVICE		DATETIME 	NOT NULL,
   	DATEOFREPORT  		DATETIME 	NOT NULL,
   	REPORTLOCATION  	VARCHAR(350),
   	STATEID				TINYINT 	NOT NULL,
   	RECEIVEDDATE		DATETIME DEFAULT NOW(),
   	CREATED 			DATETIME DEFAULT NOW(),
  	UPDATED 			DATETIME DEFAULT NOW(),
	PRIMARY KEY PK_MR(MEDICAL_RECORDID),
	FOREIGN KEY FK_MR_PERSONID (PERSONID) 				REFERENCES PERSON(ID),
	FOREIGN KEY FK_MR_RP (RECEIVING_PERSONNEL) 			REFERENCES PERSONNEL(PERSONNELID),
	FOREIGN KEY FK_MR_SP (SENDING_PERSONNEL) 			REFERENCES PERSONNEL(PERSONNELID),
  	FOREIGN KEY FK_MR_SENDINGORG(SENDING_ORG) 			REFERENCES ORGANIZATION(ORGID),
  	FOREIGN KEY FK_MR_RECEIVING_ORG(RECEIVING_ORG) 		REFERENCES ORGANIZATION(ORGID),
  	FOREIGN KEY FK_MR_CREATEDBY(CREATEDBY) 				REFERENCES ORGANIZATION(ORGID),
  	FOREIGN KEY FK_MR_STATE(STATEID)                    REFERENCES MEDICAL_REPORT_STATE(STATEID)
);

ALTER TABLE MEDICAL_RECORD ADD INDEX IDX_MEDICAL_RECORD_PERSON (PERSONID,DATEOFSERVICE);
ALTER TABLE MEDICAL_RECORD ADD INDEX IDX_MEDICAL_RECORD_SP(SENDING_PERSONNEL,DATEOFSERVICE,REPORTTYPEID);
ALTER TABLE MEDICAL_RECORD ADD INDEX IDX_MEDICAL_RECORD_SO(SENDING_ORG,DATEOFSERVICE,REPORTTYPEID);
ALTER TABLE MEDICAL_RECORD ADD INDEX IDX_MEDICAL_RECORD_RO(RECEIVING_ORG,DATEOFSERVICE,REPORTTYPEID);
ALTER TABLE MEDICAL_RECORD ADD INDEX IDX_MEDICAL_RECORD_RP(RECEIVING_PERSONNEL,DATEOFSERVICE,REPORTTYPEID);
ALTER TABLE MEDICAL_RECORD ADD INDEX IDX_MEDICAL_RECORD_CO(CREATEDBY,DATEOFSERVICE,REPORTTYPEID);

ALTER TABLE  MEDICAL_RECORD COMMENT 'Medical Record';



CREATE TABLE IF NOT EXISTS MEDICAL_RECORD_HISTORY (
	MEDICAL_RECORDID 	BIGINT NOT NULL,
	INPUT_TYPE			VARCHAR(10) NOT NULL,
	PERSONID			BIGINT 		NOT NULL,
   	SENDING_ORG			MEDIUMINT	NOT NULL		COMMENT  	'Medical Organization who forwarded the medical record',
   	SENDING_PERSONNEL 	BIGINT	 	NOT NULL 		COMMENT 	'Medical Practitioner who forwarded the report', 
   	RECEIVING_ORG		MEDIUMINT  					COMMENT  	'Medical Organization who requested for the medical record', 
   	RECEIVING_PERSONNEL	BIGINT	 	NOT NULL  		COMMENT  	'Medical Practitioner who requested from Medical personnel or Organization',
   	CREATEDBY			MEDIUMINT NOT NULL			COMMENT  	'Medical Organization that originally created this report',
   	REPORTTYPEID		TINYINT,
   	DATEOFSERVICE		DATETIME NOT NULL,
   	DATEOFREPORT  		DATETIME NOT NULL,
   	REPORTLOCATION  	VARCHAR(350),
   	STATEID				TINYINT,
   	RECEIVEDDATE		DATETIME DEFAULT NOW(),
   	CREATED 			DATETIME DEFAULT NOW(),
  	UPDATED 			DATETIME DEFAULT NOW()
	
);
ALTER TABLE MEDICAL_RECORD_HISTORY ADD INDEX IDX_MRH(MEDICAL_RECORDID,CREATED);
ALTER TABLE MEDICAL_RECORD_HISTORY ADD INDEX IDX_MRH_CREATED(CREATED);






CREATE TABLE IF NOT EXISTS MEDICAL_RECORD_NOTES (
		MEDICAL_RECORD_NOTES_ID 		BIGINT 		NOT NULL  AUTO_INCREMENT,
		CREATED							DATETIME 	NOT NULL DEFAULT  NOW(),
		MEDICAL_RECORDID   				BIGINT 		NOT NULL,
		NOTES							TEXT,
		CREATEDBYTYPE					TINYINT		NOT NULL DEFAULT 0  COMMENT 'Notes can be created by patient or personnel',
		CREATEDBY						BIGINT		NOT NULL,
		STATE							TINYINT		NOT NULL DEFAULT 0,
		PRIMARY KEY PK_MEDICAL_RECORD_NOTES(MEDICAL_RECORD_NOTES_ID),
  		FOREIGN KEY FK_MEDICAL_RECORD_NOTES_MR(MEDICAL_RECORDID) REFERENCES MEDICAL_RECORD(MEDICAL_RECORDID)
  );



ALTER TABLE  MEDICAL_RECORD_NOTES COMMENT 'Medical Record notes';



CREATE TABLE IF NOT EXISTS  MEDICAL_RECORD_RECIPIENT (
		MEDICAL_RECORD_RECIPIENT_ID 	BIGINT 		NOT NULL  AUTO_INCREMENT,
		REQUESTEDTIME					DATETIME 	NOT NULL DEFAULT  NOW(),
		MEDICAL_RECORDID   				BIGINT 		NOT NULL,
		SENDING_ORG						TINYINT		NOT NULL,
   		SENDING_PERSONNEL 				MEDIUMINT 	NOT NULL, 
		RECEIPIENT_ORG   				MEDIUMINT,
		RECIPIENT_PERSONNEL		  		BIGINT 		NOT NULL,
		STATE							TINYINT,   
		PROCESSEDTIME 					DATETIME,
		CREATED 						DATETIME DEFAULT NOW(),
  		UPDATED 						DATETIME DEFAULT NOW(),
  		PRIMARY KEY PK_MEDICAL_RECORD_RECIPIENT(MEDICAL_RECORD_RECIPIENT_ID),
  		FOREIGN KEY FK_MEDICAL_RECORD_RECIPIENT_MR(MEDICAL_RECORDID) REFERENCES MEDICAL_RECORD(MEDICAL_RECORDID)
);  

ALTER TABLE MEDICAL_RECORD_RECIPIENT ADD INDEX IDX_MRR_RECIPIENT_STATE(STATE,REQUESTEDTIME);
ALTER TABLE MEDICAL_RECORD_RECIPIENT ADD INDEX IDX_MRR_RECIPIENT_MRID(MEDICAL_RECORDID);
ALTER TABLE MEDICAL_RECORD_RECIPIENT ADD INDEX IDX_MRR_RECIPIENT_ORG(RECEIPIENT_ORG,REQUESTEDTIME);
ALTER TABLE MEDICAL_RECORD_RECIPIENT ADD INDEX IDX_MRR_RECIPIENT_PERSONNEL(RECIPIENT_PERSONNEL,REQUESTEDTIME);

ALTER TABLE  MEDICAL_RECORD_RECIPIENT COMMENT 'Medical record data receipients';     
    
 /* add log table for medical record recepient */
 
 
 CREATE TABLE IF NOT EXISTS MEDICAL_RECORD_NUMBER (
  	 PERSONID 				BIGINT    NOT NULL,
	 ORGANIZATIONID			MEDIUMINT NOT NULL,
	 MRM					VARCHAR(100) NOT NULL,
	 CREATED 				DATETIME DEFAULT NOW(),
     UPDATED 				DATETIME DEFAULT NOW(),
	 PRIMARY KEY PK_MRN_MEDICAREID(PERSONID,ORGANIZATIONID),
	 FOREIGN KEY FK_MRN_MEDICAREID_PID(PERSONID) REFERENCES PERSON(ID),
	 FOREIGN KEY FK_MRN_MEDICAREID_ORG(ORGANIZATIONID) REFERENCES ORGANIZATION(ORGID),
	 UNIQUE  UK_MRN_MEDICAREID(MRM,ORGANIZATIONID,PERSONID)
  ); 	
  
  ALTER TABLE  MEDICAL_RECORD_NUMBER COMMENT 'Medicare ID by organization';       
  
/* CAREPROVIDER, PATIENT */
   
CREATE TABLE IF NOT EXISTS USER
  (
	USERID 			BIGINT NOT NULL,
	USERTYPE    	TINYINT NOT NULL,
	USERINTERNALID	BIGINT  NOT NULL,
	LOGINNAME 		VARCHAR(100)  NOT NULL,
	PASSWORD 		VARCHAR(100)  NOT NULL,
	LOGINATTEMPTS 	TINYINT,
	LASTLOGIN   	DATETIME,
	STATE			TINYINT,
	CREATED 		DATETIME DEFAULT NOW(),
  	UPDATED 		DATETIME DEFAULT NOW(),
  	PRIMARY KEY PK_USER(USERID),
  	UNIQUE UK_USER_LOGINNAME(LOGINNAME)
);
ALTER TABLE USER ADD INDEX IDX_USER_LOGINNAME(LOGINNAME);
ALTER TABLE  USER COMMENT 'User table';       



CREATE TABLE IF NOT EXISTS USER_ROLE (
	USERID 			BIGINT NOT NULL,
	ROLEID 			TINYINT NOT NULL,
	STATE			TINYINT NOT NULL,
	CREATED 		DATETIME DEFAULT NOW(),
  	UPDATED 		DATETIME DEFAULT NOW(),
  	PRIMARY KEY PK_USER_ROLE(USERID,ROLEID),
  	FOREIGN KEY FK_USER_ROLE_ID(USERID) REFERENCES USER(USERID),
  	FOREIGN KEY FK_USER_ROLE_ROLEID(ROLEID) REFERENCES ROLE(ROLEID)
);
ALTER TABLE  USER_ROLE COMMENT 'Roles associated to a user'; 

CREATE TABLE IF NOT EXISTS USER_PERSON_ASSOCIATION (
	USERID BIGINT NOT NULL,
	PERSONID BIGINT NOT NULL,
	STATE 	 TINYINT NOT NULL DEFAULT 0,
	PRIMARY KEY UK_USER_PERSON_ASSOCIATION (USERID,PERSONID),
	FOREIGN KEY FK_USER_PERSON_ASSOCIATION_USERIDID(USERID) REFERENCES USER(USERID),
	FOREIGN KEY FK_USER_PERSON_ASSOCIATION_PERSONID(PERSONID) REFERENCES PERSON(ID)
);
ALTER TABLE  USER_PERSON_ASSOCIATION COMMENT 'User patient association';


CREATE TABLE IF NOT EXISTS AUTHENTICATION (
	AUTHENTICATIONID 	BIGINT NOT NULL,
	AUTHENTICATIONTYPE	TINYINT NOT NULL COMMENT 'Medical personnel or Patient',
	USERID 				BIGINT NOT NULL,
	TOKEN  				VARCHAR(50) NOT NULL,
	CREATEDTIME 		DATETIME NOT NULL DEFAULT NOW(),
	EXPIRYTIME			DATETIME NOT NULL,
	IPADDRESS			VARCHAR(100),
	PRIMARY KEY UK_AUTHENTICATION (AUTHENTICATIONID),
	FOREIGN KEY FK_AUTHENTICATION_USERIDID(USERID) REFERENCES USER(USERID)
	
	
 );
ALTER TABLE AUTHENTICATION ADD INDEX IDX_AUTHENTICATION_TOKEN(TOKEN);
ALTER TABLE AUTHENTICATION ADD INDEX IDX_AUTHENTICATION_USERID(USERID);

ALTER TABLE  AUTHENTICATION COMMENT 'Authentication';


CREATE TABLE IF NOT EXISTS AUDIT_LOG (
	ACCESSTIME  DATETIME NOT NULL DEFAULT NOW(),
	USERID		BIGINT	NOT NULL,
	IPADDRESS	VARCHAR(100),
	API		    VARCHAR(200) NOT NULL,
	ARGUMENTS	VARCHAR(500)

);

ALTER TABLE AUDIT_LOG ADD INDEX IDX_AUDIT_LOG(USERID);
ALTER TABLE AUDIT_LOG ADD INDEX IDX_AUDIT_ACCESSTIME(ACCESSTIME,USERID);




CREATE TABLE IF NOT EXISTS WYTAL_EXCEPTION (
     TYPE 				VARCHAR(2) NOT NULL,
     CODE 				MEDIUMINT NOT NULL,
     DESCRIPTION 		VARCHAR(300),
     CREATED 			DATETIME DEFAULT NOW(),
     UPDATED 			DATETIME DEFAULT NOW(),
     PRIMARY KEY PK_WYTAL_EXCEPTION( TYPE,CODE)
);


INSERT INTO WYTAL_EXCEPTION (TYPE,CODE, DESCRIPTION,CREATED,UPDATED) VALUES ( 'WT',9999,' Unexpected exception occurred', NOW(),NOW());
INSERT INTO WYTAL_EXCEPTION (TYPE,CODE, DESCRIPTION,CREATED,UPDATED) VALUES ( 'OR',0001,' Organization name is mandatory', NOW(),NOW());
INSERT INTO WYTAL_EXCEPTION (TYPE,CODE, DESCRIPTION,CREATED,UPDATED) VALUES ( 'OR',0002,' Invalid parent organization', NOW(),NOW());

INSERT INTO WYTAL_EXCEPTION (TYPE,CODE, DESCRIPTION,CREATED,UPDATED) VALUES ( 'OR',0003,' Cannot delete organization. Child organization exists', NOW(),NOW());
INSERT INTO WYTAL_EXCEPTION (TYPE,CODE, DESCRIPTION,CREATED,UPDATED) VALUES ( 'OR',0004,' Invalid organization type', NOW(),NOW());

COMMIT;
     














